import { BjjType, TrainingIntensity } from '@/src/supabase/types'; 
import { UserSkill, Skill, Category } from './skills'; // Assuming UserSkill is in skills.ts

export interface Training {
  id: string; // UUID, generated by Supabase
  userId: string; // Foreign key to auth.users.id
  date: string; // ISO date string (e.g., "2023-10-27")
  duration: number; // Duration in minutes
  bjjType: BjjType;
  intensity: TrainingIntensity;
  note?: string | null;
  created_at?: Date;
  updated_at?: Date;
  // For joining data in fetch operations
  user_skill_usages?: UserSkillUsageWithDetails[]; 
}

export interface UserSkillUsage {
  id: string; // UUID, generated by Supabase
  userSkillId: string; // Foreign key to UserSkill.id (NOT Skill.id directly)
  quantity: number;
  success: boolean;
  usageType: 'TRAINING' | 'COMPETITION'; // Enum or literal types
  trainingId?: string | null; // Foreign key to Training.id
  competitionId?: string | null; // Foreign key to Competition.id
  matchId?: string | null; // Foreign key to Match.id, if applicable
  created_at?: Date;
  updated_at?: Date;
  note?: string | null; // Optional note specific to this usage
}

// For form handling, it might be useful to have a combined type
export interface UserSkillUsageFormData {
  userSkillId: string;
  userSkillName?: string; // For display in the form
  quantity: string; // Input as string, convert to number on submit
  success: boolean;
}

// For displaying training sessions with details about skills used
export interface UserSkillUsageWithDetails extends UserSkillUsage {
  user_skill?: UserSkill & { // Supabase join alias often uses table name
    skill: Skill & { category: Category };
  };
  // If joining directly from UserSkillUsage to Skill (less likely with current structure)
  // skill?: Skill & { category: Category }; 
}

export interface TrainingWithDetails extends Training {
  user_skill_usages: UserSkillUsageWithDetails[];
}

