---
description: 
globs: 
alwaysApply: false
---
# Project Settings and Directory Structure

## Tech stack
Frontend: Expo React native
Backend: Supabase

## Project Component Usage Guidelines

When developing new features or components, please adhere to the following guidelines:

*   **Text Elements**: Always use the `ThemedText.tsx` component for displaying text. This ensures consistency in typography and theme adherence.
*   **View Containers**: Utilize `ThemedView.tsx` for all general view containers. This helps maintain a consistent background and layout styling according to the current theme.
*   **Buttons**: For interactive button elements, use the `ThemedButton.tsx` component. It provides standard styling and theming for buttons across the application.
*   **Custom Components**: When designing new custom components that require theme-aware styling (e.g., dynamic colors based on light/dark mode), use the `useThemeColor.ts` hook. This hook should be used in conjunction with the color definitions in `Colors.ts` to ensure that custom components correctly adapt to theme changes.

## Directory Structure (src)

```
src
├── app
│   ├── (auth)
│   ├── (protected)
│   │   ├── (modal)
│   │   │   └── create
│   │   │       ├── competition.tsx
│   │   │       ├── skill.tsx
│   │   │       └── training.tsx
│   │   ├── (tabs)
│   │   │   ├── _layout.tsx
│   │   │   ├── index.tsx (home)
│   │   │   └── profile
│   │   ├── _layout.tsx
│   │   └── create-profile.tsx
│   ├── +not-found.tsx
│   └── _layout.tsx
├── assets
├── components
│   ├── layout
│   └── ui
│       ├── atoms
│       └── molecules
├── constants
│   ├── Colors.ts
│   └── Skills.ts
├── context
│   └── AuthContext.tsx
├── features
│   └── 'feature name'
│       ├── components
│       ├── screens
│       ├── services
│       └── utils
├── hooks
├── lib
│   └── supabase.ts
├── services
└── supabase
    ├── constants.ts
    └── types.ts
```
